<?php

namespace Cinema\CinemaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Cinema\CinemaBundle\CinemaCinemaBundle;

/**
 * NewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
    
class NewsRepository extends EntityRepository
{
    
    /**
     *  Get all news with defined type
     *  @param string $type Type of news
     *  @return array $news Array objects News 
     **/
    public function getNewsAll($type='all')
    {
        if ( $type == 'all' )
        {
            $news = $this->findBy(array(),array('id'=>'DESC'));
        }
        else
        {
            $news = $this->findBy(array('type'=>$type), array('id'=>'DESC'));
        }
        
        if (!$news) return false;
        return $news;
    }//end func
    
    
    /**
     * Get all news with defined type begin $start number and limit $limit number 
     * @param string $type Type of news
     * @param int $start begin number
     * @param int $limit limit number 
     * @return array $news Array objects News 
     **/
    public function getNews($type='all', $start = 0, $limit = CinemaCinemaBundle::NEWS_LIMIT )
    {
        if ( $type != 'all')
        {
            $dql = "SELECT n FROM CinemaCinemaBundle:News n WHERE n.type=:type ORDER BY n.id DESC";
            $em = $this->getEntityManager();
            $query = $em->createQuery($dql);
            $query->setFirstResult($start);
            $query->setMaxResults($limit);
            $query->setParameters(array('type'=>$type));
            $news = $query->getResult();
        }
        else
        {
            $dql = "SELECT n FROM CinemaCinemaBundle:News n ORDER BY n.id DESC";
            $em = $this->getEntityManager();
            $query = $em->createQuery($dql);
            $query->setFirstResult($start);
            $query->setMaxResults($limit);
            $news = $query->getResult();
        }
        if (!$news) return false;
        return $news;
    }//end func
    
    
    /**
     *  Get all news on page number $page for pagination
     *  @param string $type Type of news
     *  @param int $page Number of page
     *  @return array $news Array objects News 
     **/
    public function getNewsPage($type='all', $page=1)
    {
        $start = ($page-1)*CinemaCinemaBundle::NEWS_LIMIT;
        $news = $this->getNews($type, $start, CinemaCinemaBundle::NEWS_LIMIT);
        if (!$news) return false;
        return $news;
    }//end func
    
    
    /**
     *  Get number pages for news with defined type
     *  @param string $type Type of news
     *  @return int $pages Number of pages
     **/
    public function getNumberPage($type='all')
    {
        if ( $type == 'all' )
        {
            $news = $this->findBy(array(),array('id'=>'DESC'));
        }
        else
        {
            $news = $this->findBy(array('type'=>$type), array('id'=>'DESC'));
        }
        if (!$news) return 0;
        $numberNews = count($news);
        $pages = ceil(floatval($numberNews)/CinemaCinemaBundle::NEWS_LIMIT);
        return $pages;
    }//end func
    
    
    /**
     *  Get one news with defined id
     *  @param int $id News id
     *  @return object $news  News 
     **/
    public function getOneNews($id)
    {
        $news = $this->find($id);
        if (!$news) return false;
        return $news;
    }//end func  
    
    
    /**
     *  Create object News from ($_POST array)
     *  @param int $id News id
     *  @param array $post $_POST array
     *  @return object $news News 
     **/
    public function getNewsFromForm($id,$post)
    {
        if ( !is_array($post) ) return false;
        $news = new News();
        $news->setContent($post['content']);
        $news->setTitle($post['title']);
        $news->setType($post['type']);
        $news->setUserId( intval($post['user_id']));
        return $news;
    }//end func
    
    
    /**
     *  Update object News from ($_POST array)
     *  @param int $id News id
     *  @param array $post $_POST array
     *  @return object $news News 
     **/
    public function getUpdatedNewsFromForm($id,$post)
    {
        
        if ( !is_array($post) ) return false;
        $news = $this->find($id);
        $news->setContent($post['content']);
        $news->setTitle($post['title']);
        $news->setType($post['type']);
        $news->setUserId( intval($post['user_id']));
        return $news;
    }//end func
    
    
    /**
     *  Upload images for News( by $_POST request)
     *  @param string $uniqid Id of request
     *  @param int $id News id
     *  @return string $ext Extension of file or false if fail 
     **/
    public function uploadImg($uniqid,$id)
    {
        $files = $_FILES[$uniqid]; 
        $tmp_name = $files['tmp_name']['img'];
        $name = $files['name']['img'];
        $ext = strrchr($name,'.');
        $error = $files['error']['img'];
        if ( !$error )
        {
            $dir  =  CinemaCinemaBundle::BASE_PATH . CinemaCinemaBundle::UPLOAD_NEWS_DIR;
            if ( !file_exists( $dir ) || !is_dir( $dir ) ) 
                if ( !mkdir( $dir )) return false;
            if( move_uploaded_file($tmp_name, $dir.'/'.$id.$ext)) return $ext;
            return false;
        }
        return false;
    }//end func
    
    
    /**
     *  Delete image file for news with defined id
     *  @param int $id News id
     *  @return boolean false if fail 
     **/
    public function delNewsImg($id)
    {
        $news = $this->find($id);
        $imgName = $news->getImg();
        $dir  =  CinemaCinemaBundle::BASE_PATH . CinemaCinemaBundle::UPLOAD_NEWS_DIR;
        $filename = $dir.'/'.$imgName;
        if (file_exists($filename)) return unlink($filename);
        return false;   
    }//end func
    
}
