<?php

namespace Cinema\CinemaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Cinema\CinemaBundle\CinemaCinemaBundle;

/**
 * ScheduleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ScheduleRepository extends EntityRepository
{
    
    /**
     * array of names months 
     **/ 
    protected $monthName = array( 'Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря' );
    
    /**
     * define max number of room exists in shedules
     * @return int $maxRoom  Max number room 
     **/
    public function countRooms()
    {
        $seances = $this->findAll();
        $maxRoom = 0;
        foreach( $seances as $seance )
        {
            $currRoom = $seance->getNumberRoot();
            if ( $currRoom > $maxRoom ) $maxRoom = $currRoom;
        }
        return $maxRoom;          
    }//end func
    
    
     /**
     * get seances of film with defined id, room, between date begin and date end
     * @param int $filmId  Film id
     * @param int $room Number room
     * @param DateTime object $dateBegin  Interval Date begin
     * @param DateTime object $dateEnd   Interval Date end
     * @return array $seances  Array of object Seance
     **/   
     public function getScheduleFilm( $filmId, $room, $dateBegin, $dateEnd )
    {
        $begin = date_create( $dateBegin );
        $end = date_create( $dateEnd );
        $dql = "SELECT s FROM CinemaCinemaBundle:Schedule s WHERE s.film_id=:film_id AND s.numberRoot=:room AND s.time_begin >= :start AND s.time_begin <= :end ORDER BY s.time_begin ASC";
        $em = $this->getEntityManager();
        $query = $em->createQuery( $dql );
        $query->setParameters( array( 'film_id' => $filmId, 'room' => $room, 'start' => $begin, 'end' => $end ));
        $seances = $query->getResult();
        return $seances;
    }//end func
    
    /**
     * get seances of film with defined id, room, between date begin and date end and format 2d
     * @param int $filmId  Film id
     * @param int $room Number room
     * @param DateTime object $dateBegin  Interval Date begin
     * @param DateTime object $dateEnd   Interval Date end
     * @return array $seances  Array of object Seance
     **/   
     public function getScheduleFilm2D( $filmId, $room, $dateBegin, $dateEnd )
    {
        $begin = date_create( $dateBegin );
        $end = date_create( $dateEnd );
        $dql = "SELECT s FROM CinemaCinemaBundle:Schedule s WHERE s.film_id=:film_id AND s.numberRoot=:room AND s.time_begin >= :start AND s.time_begin <= :end ORDER BY s.time_begin  AND s.is3d=0 ASC";       
        $em = $this->getEntityManager();
        $query = $em->createQuery( $dql );
        $query->setParameters( array( 'film_id' => $filmId, 'room' => $room, 'start' => $begin, 'end' => $end ));
        $seances = $query->getResult();
        return $seances;
    }//end func
    
    /**
     * get seances of film with defined id, room, between date begin and date end and format 3d
     * @param int $filmId  Film id
     * @param int $room Number room
     * @param DateTime object $dateBegin  Interval Date begin
     * @param DateTime object $dateEnd   Interval Date end
     * @return array $seances  Array of object Seance
     **/   
     public function getScheduleFilm3D( $filmId, $room, $dateBegin, $dateEnd )
     {
        $begin = date_create( $dateBegin );
        $end = date_create( $dateEnd );
        $dql = "SELECT s FROM CinemaCinemaBundle:Schedule s WHERE s.film_id=:film_id AND s.numberRoot=:room AND s.time_begin >= :start AND s.time_begin <= :end ORDER BY s.time_begin  AND s.is3d=1 ASC";       
        $em = $this->getEntityManager();
        $query = $em->createQuery( $dql );
        $query->setParameters( array( 'film_id' => $filmId, 'room' => $room, 'start' => $begin, 'end' => $end ));
        $seances = $query->getResult();
        return $seances;
    }//end func
    
    
    /**
     * get seances of film with defined id, room, and in day number $day considering the current
     * @param int $filmId  Film id
     * @param int $room  Number room
     * @param int $day Number of day
     * @return array $seances Array of object Seance
     **/ 
    public function getScheduleFilmToday( $filmId, $room, $day = 0 )
    {
        $begin = date_create( date( CinemaCinemaBundle::DATETIME_FORMAT1, time() + CinemaCinemaBundle::SEC_IN_DAY * $day ) );
        $end = date_create( date( CinemaCinemaBundle::DATETIME_FORMAT2, time() + CinemaCinemaBundle::SEC_IN_DAY * $day ) );
        $dql = "SELECT s FROM CinemaCinemaBundle:Schedule s WHERE s.film_id=:film_id AND s.numberRoot=:room AND s.time_begin >= :start AND s.time_begin <= :end ORDER BY s.time_begin ASC";
        $em = $this->getEntityManager();
        $query = $em->createQuery( $dql );
        $query->setParameters( array( 'film_id' => $filmId, 'room' => $room, 'start' => $begin, 'end' => $end ));
        $seances = $query->getResult();
        return $seances;
    }//end func
    
     /**
     * get seances of film with defined id, and in day number $day considering the current
     * @param int $filmId  Film id
     * @param int $room  Number room
     * @param int $day Number of day
     * @return array $seances Array of object Seance
     **/ 
    public function getScheduleFilmToday2( $filmId, $day = 0 )
    {
        $begin = date_create( date( CinemaCinemaBundle::DATETIME_FORMAT1, time() + CinemaCinemaBundle::SEC_IN_DAY * $day ) );
        $end = date_create( date( CinemaCinemaBundle::DATETIME_FORMAT2, time() + CinemaCinemaBundle::SEC_IN_DAY * $day ) );
        $dql = "SELECT s FROM CinemaCinemaBundle:Schedule s WHERE s.film_id=:film_id AND s.time_begin >= :start AND s.time_begin <= :end ORDER BY s.time_begin ASC";
        $em = $this->getEntityManager();
        $query = $em->createQuery( $dql );
        $query->setParameters( array( 'film_id' => $filmId, 'start' => $begin, 'end' => $end ));
        $seances = $query->getResult();
        return $seances;
    }//end func
    
    
    /**
     * get dates are from the interval boundaries
     * @param int $firstDay Number of first day of week
     * @param int $week Number of week
     * @return array $seances Array of object DateTime
     **/ 
    public function getDates( $firstDay = 4, $week = 0 )
    {
        $dates = array();
        $day = date( 'w', time() );
        $n = abs( $firstDay - $day );
        if ( $day < $firstDay )
        {
            $dateBegin = date( CinemaCinemaBundle::DATETIME_FORMAT1, time() - ( ( 7 - $n ) - $week * 7 ) * CinemaCinemaBundle::SEC_IN_DAY );
            $dateEnd = date( CinemaCinemaBundle::DATETIME_FORMAT2, time() - ( ( 1 - $n ) - $week * 7 ) * CinemaCinemaBundle::SEC_IN_DAY );
        }
        else
        {
            $dateBegin = date( CinemaCinemaBundle::DATETIME_FORMAT1, time() - ( $n - $week * 7 ) * CinemaCinemaBundle::SEC_IN_DAY );
            $dateEnd = date( CinemaCinemaBundle::DATETIME_FORMAT2, time() - ( $n - 6 - $week * 7 ) * CinemaCinemaBundle::SEC_IN_DAY ); 
        }
        $dates['datebegin'] = $dateBegin;
        $dates['dateend'] = $dateEnd;
        return $dates;
    }//end func
    
    
    /**
     * get dates are from the interval boundaries as string
     * @param int $firstDay Number of first day of week
     * @param int $week Number of week
     * @return string $dates Dates  interval boundaries as string
     **/
    public function getDatesString( $firstDay = 4, $week = 0 )
    {
        $dates = array();
        $day = date( 'w', time() );
        $n = abs( $firstDay - $day );
        if ( $day < $firstDay )
        {
            $dateBeginDay = date( 'j', time() - ( ( 7 - $n ) - $week * 7 ) * CinemaCinemaBundle::SEC_IN_DAY );
            $dateBeginMonth = date( 'm', time() - ( ( 7 - $n ) - $week * 7 ) * CinemaCinemaBundle::SEC_IN_DAY );
            $dateEndDay = date( 'j', time() - ( ( 1 - $n ) - $week * 7 ) * CinemaCinemaBundle::SEC_IN_DAY );
            $dateEndMonth = date( 'm', time() - ( ( 1 - $n ) - $week * 7 ) * CinemaCinemaBundle::SEC_IN_DAY );
        }
        else
        {
            $dateBeginDay = date( 'j', time() - ( $n - $week * 7 ) * CinemaCinemaBundle::SEC_IN_DAY );
            $dateBeginMonth = date( 'm', time() - ( $n - $week * 7 ) * CinemaCinemaBundle::SEC_IN_DAY );
            $dateEndDay = date( 'j', time() - ( $n - 6 - $week * 7 ) * CinemaCinemaBundle::SEC_IN_DAY );
            $dateEndMonth = date( 'm', time() - ( $n - 6 - $week * 7 ) * CinemaCinemaBundle::SEC_IN_DAY ); 
        }
        $monthBegin = $this->monthName[intval( $dateBeginMonth ) - 1];
        $monthEnd = $this->monthName[intval( $dateEndMonth ) - 1];
        $dates = $dateBeginDay . ' ' . $monthBegin . ' - ' . $dateEndDay . ' ' . $monthEnd;
        return $dates;
    }//end func
    
    
    /**
     * get array of dates are from the interval boundaries as string
     * for film with defined id
     * @param int $id Film id
     * @return array $datesStringArray Array of strings Dates  interval boundaries
     **/
    public function getDatesStringArray($id)
    {
        $datesStringArray = array();
        for ( $week = 0; $week < 3; $week++ )
        {
            if ( is_array( $this->getScheduleTable( $id, $week ) ) )
                $datesStringArray[$week] = $this->getDatesString( 4, $week );
        }
        return $datesStringArray;
    }//end func
    
    
    /**
     * get date in day from today as string
     * @param int $day Number of day
     * @return string Date
     **/
    public function getDate( $day = 0 )
    {
        $dayOfMonth = intval( date( 'd', time() + CinemaCinemaBundle::SEC_IN_DAY * $day ) );
        $month = intval( date( 'm', time() + CinemaCinemaBundle::SEC_IN_DAY * $day ) );
        $month = $this->monthName[$month - 1];
        return $dayOfMonth . '&nbsp;' . $month;
    }//end func
    
    
    /**
     * get date of week in day from today as number
     * @param int $day Number of day
     * @return int day of week
     **/
    public function getDayWeek( $day = 0 )
    {
        $dayOfWeek = intval( date( 'w', time() + CinemaCinemaBundle::SEC_IN_DAY * $day ) );
        return $dayOfWeek;
    }//end func
    
    
    /**
     * get seances of film with defined id, and in defined week number $week considering the current
     * @param int $id Film id
     * @param int $week Number week
     * @return array $date Array of objects seances
     **/
    public function getScheduleTable( $id = -1, $week )
    {
        $maxRoom = $this->countRooms();
        if ( $id < 0 ) return $maxRoom;
        $dates = $this->getDates( 4, $week );
        $seances = array();
        $data = array();
        for ( $room = 1; $room <= $maxRoom; $room++ )
        {
            $seances[$room] = $this->getScheduleFilm( $id, $room, $dates['datebegin'], $dates['dateend'] );
        }
        $allSeances = 0;
        foreach ( $seances as $seanceInRoom ) $allSeances += count( $seanceInRoom );
        if ( !$allSeances ) return $maxRoom;
        $data['seances'] = $seances;
        return $data;
        
    }//end func
    
    /**
     * get seances of film with defined id, and in defined week number $week considering the current
     * @param int $id Film id
     * @param int $week Number week
     * @return array $date Array of objects seances
     **/
    public function getScheduleTableWithFormat( $id = -1, $week, $format )
    {
        $maxRoom = $this->countRooms();
        if ( $id < 0 ) return $maxRoom;
        $dates = $this->getDates( 4, $week );
        $seances = array();
        $data = array();
        for ( $room = 1; $room <= $maxRoom; $room++ )
        {
            $seances[$room] = $this->getScheduleFilm( $id, $room, $dates['datebegin'], $dates['dateend'] );
        }
        $allSeances = 0;
        foreach ( $seances as $seanceInRoom ) $allSeances += count( $seanceInRoom );
        if ( !$allSeances ) return $maxRoom;
        $data['seances'] = $seances;
        return $data;
        
    }//end func
    
    
    /**
     * get seances of all films with in defined day number $day considering the current
     * @param int $day Number day
     * @param array $films Array of objects Film
     * @return array $date Array of objects seances plus day and day of week
     **/
    public function getFullScheduleTable( $day = -1, $films )
    {
        if( $day < 0 ) $day = 0;
        $day = intval( $day );
        $maxRoom = $this->countRooms();
        if ( !$films ) return  $maxRoom;
        $seances = array();
        $data = array();
        foreach( $films as $film )
        {
            $filmId = $film->getId();
            for ( $room = 1; $room <= $maxRoom; $room++ )
            {
                $seances[$filmId][$room] = $this->getScheduleFilmToday( $filmId, $room, $day );
            }
            $seances[$filmId]['film'] = $film;
        }
        $allSeances = 0;
        foreach ( $seances as $seancesFilm )
            foreach ( $seancesFilm as $seanceInRoom ) $allSeances += count( $seanceInRoom );
        if ( !$allSeances ) return $maxRoom;
        $data['seances'] = $seances;
        $data['date'] = $this->getDate( $day );
        $data['dayweek'] = $this->getDayWeek( $day );
        return $data;
    }//end func
    
    /**
     * get seances of all films with in defined day number $day considering the current
     * @param int $day Number day
     * @param array $films Array of objects Film
     * @return array $date Array of objects seances plus day and day of week
     **/
    public function getFullScheduleTable2( $day = -1, $films )
    {
        if( $day < 0 ) $day = 0;
        $day = intval( $day );
        $maxRoom = $this->countRooms();
        if ( !$films ) return  $maxRoom;
        $seances = array();
        $data = array();
        foreach( $films as $film )
        {
            $filmId = $film->getId();
            $seances[$filmId]['seances'] = $this->getScheduleFilmToday2( $filmId, $day );
            $seances[$filmId]['film'] = $film;
        }
        $allSeances = 0;
        foreach ( $seances as $seancesFilm )
            $allSeances += count( $seancesFilm );
        if ( !$allSeances ) return $maxRoom;
        $data['seances'] = $seances;
        $data['date'] = $this->getDate( $day );
        $data['dayweek'] = $this->getDayWeek( $day );
        return $data;
    }//end func
    
    
    /**
     * check that seansec exists in day number $day considering the current
     * @param int $day Number day
     * @return boolean true if are seances or false otherwise
     **/
    public function areSeancesToday( $day = -1 )
    {
        if( $day < 0 ) $day = 0;
        $day = intval( $day );
        $seances = array();
        $begin = date_create( date( CinemaCinemaBundle::DATETIME_FORMAT1, time() + CinemaCinemaBundle::SEC_IN_DAY * $day ) );
        $end = date_create( date( CinemaCinemaBundle::DATETIME_FORMAT2, time() + CinemaCinemaBundle::SEC_IN_DAY * $day ) );
        $dql = "SELECT s FROM CinemaCinemaBundle:Schedule s WHERE s.time_begin >= :start AND s.time_begin <= :end";
        $em = $this->getEntityManager();
        $query = $em->createQuery( $dql );
        $query->setParameters( array( 'start' => $begin, 'end' => $end ));
        $seances = $query->getResult();
        return ( is_array( $seances ) && count ( $seances ))? true : false;
    }//end func
    
    
    /**
     * delete seances for film with defined id
     * @param int $id Film id
     **/
    public function delScheduleByFilmId($id)
    {
        $em = $this->getEntityManager();
        $dql = "DELETE FROM CinemaCinemaBundle:Schedule s WHERE s.film_id=:film_id";
        $query = $em->createQuery( $dql );
        $query->setParameters(array('film_id'=>$id));
        $query->getResult();
        
    }//end func
    
    
    /**
     * check that film with given id exists
     * @param int $id Film id
     * @return true if exists or false otherwise
     **/
    public function filmExists($id=-1)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT f FROM CinemaCinemaBundle:Film f WHERE f.id=:film_id";
        $query = $em->createQuery( $dql );
        $query->setParameters(array('film_id'=>$id));
        $result = $query->getResult();
        return ( $result )? true : false;
    }//
    
    
    /**
     * delete all seances for which there is no films
     * @return boolean true if success delete or false otherwise
     **/
    public function clearLostSeances()
    {
        $seances = $this->findAll();
        if ( !$seances ) return false;
        $filmIds = array();
        foreach( $seances as $seance )
        {
            $filmIds[] = $seance->getFilmId();
        }
        $filmIds = array_unique( $filmIds );
        foreach( $filmIds as $filmId )
        {
            if ( !$this->filmExists($filmId) ) $this->delScheduleByFilmId( $filmId );
        }
        return true;
    }//end func
    
    /**
     * how seances film has  
     * @param integer filmId
     * @return string '2D' or '3D' or '3D2D' 
     **/
    public function filmHasFormats($filmId)
    {
        $format = '';
        $dql = "SELECT count(s.id) FROM CinemaCinemaBundle:Schedule s WHERE s.film_id=:film_id AND s.is3d=1";
        $em = $this->getEntityManager();
        $query = $em->createQuery( $dql );
        $query->setParameters( array( 'film_id' => $filmId) );
        $result = $query->getResult();
        $count3d = intval($result[0][1]);
        $format .= (($count3d)? '3D' : '');
        $dql = "SELECT count(s.id) FROM CinemaCinemaBundle:Schedule s WHERE s.film_id=:film_id";
        $em = $this->getEntityManager();
        $query = $em->createQuery( $dql );
        $query->setParameters( array( 'film_id' => $filmId) );
        $result = $query->getResult();
        $countAll = intval($result[0][1]);
        $format .= (($countAll > $count3d)? '2D' : '');
        return $format;
    }
    
    
}
