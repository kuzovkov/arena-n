<?php

namespace Cinema\CinemaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Cinema\CinemaBundle\CinemaCinemaBundle;

/**
 * BannerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BannerRepository extends EntityRepository
{
    /**
     * extensions for banner image file
     **/ 
    protected $bannerImageExt = array( '.jpg', '.jpeg', '.png', '.gif' );
    
    
    /**
     * get All banners
     * @return array Array of objects Banner
     **/
    public function getAllBanners()
    {
        $banners = $this->findAll();
        if ( !$banners ) return false;
        return $banners;
    }//end func
    
    
    /**
     * get banners that must be shown
     * @return array Array of objects Banner
     **/
    public function getBanners()
    {
        $bannersAll = $this->findAll();
        if ( !$bannersAll ) return false;
        $banners = array();
        foreach( $bannersAll as $banner )
            if ( $banner->getBannershow() ) $banners[] = $banner; 
        return $banners;
    }//end func
    
    
    /**
     * get banners with id
     * @param int id
     * @return objects Banner
     **/
    public function getOneBanner($id)
    {
        $banner = $this->find($id);
        if ( !$banner ) return false;
        return $banner;
    }//end func
    
    
    /**
     * create Banner object from $_POST array
     * @param int id
     * @param array Array $_POST
     * @return objects Banner
     **/
    public function getBannerFromForm($id,$post)
    {
        if ( !is_array($post) ) return false;
        $banner = new Banner();
        $banner->setName($post['name']);
        $show = ( isset($post['bannershow']) )? true:false;
        $banner->setBannerUrl($post['banner_url']);  
        $banner->setBannershow($show);
        return $banner;
    }//end func
    
    
    /**
     * update Banner object from $_POST array
     * @param int id
     * @param array Array $_POST
     * @return objects Banner
     **/
     public function getUpdatedBannerFromForm($id,$post)
    {
        
        if ( !is_array($post) ) return false;
        $banner = $this->find($id);
        $banner->setName($post['name']);
        $show = ( isset($post['bannershow']) )? true:false;  
        $banner->setBannershow($show);
        $banner->setBannerUrl($post['banner_url']);  
        return $banner;
    }//end func
    
    
    /**
     * upload banner image file by POST request
     * @param string uniqid uniqid request
     * @param int id Banner object id
     * @return objects Banner
     **/
    public function uploadImg($uniqid,$id)
    {
        $files = $_FILES[$uniqid]; 
        $tmp_name = $files['tmp_name']['imgfilename'];
        $name = $files['name']['imgfilename'];
        $ext = strrchr($name,'.');
        if ( !in_array( $ext, $this->bannerImageExt ) ) return false;
        $error = $files['error']['imgfilename'];
        if ( !$error )
        {
            $dir  =  CinemaCinemaBundle::BASE_PATH . CinemaCinemaBundle::UPLOAD_BANNER_DIR;
            if ( !file_exists( $dir ) || !is_dir( $dir ) ) 
                if ( !mkdir( $dir )) return false; 
            if( move_uploaded_file($tmp_name, $dir . '/' . $id.$ext)) return $ext;
            return false;
        }
        return false;
    }//end func
    
    /**
     * delete banner image file
     * @param int id Banner object id
     * @return boolean true
     **/
    public function delBannerImg($id)
    {
        $dir  =  CinemaCinemaBundle::BASE_PATH . CinemaCinemaBundle::UPLOAD_BANNER_DIR;
        foreach ( $this->bannerImageExt as $ext )
        {
            $imgBanner = $id . $ext;
            $filename = $dir.'/'.$imgBanner;
            if ( file_exists( $filename ) ) unlink($filename);     
        }
        return true;   
    }//end func
    
    
    /**
     * delete banner image files that are not referenced in the database
     * @return boolean false if fail
     **/
    public function deleteLostBanner()
    {
        $banners = $this->findAll();
        if ( !$banners ) return false;
        $imageNames = array();
        foreach( $banners as $banner ) 
            $imageNames[] = $banner->getImgfilename();
        $dir = CinemaCinemaBundle::BASE_PATH . CinemaCinemaBundle::UPLOAD_BANNER_DIR;
        if ( !file_exists( $dir ) || !is_dir( $dir) ) return false;
        $files = scandir( $dir );
        foreach ( $files as $file )
        {
            if ( $file == '.' || $file == '..' ) continue;
            if ( !in_array( $file, $imageNames ) )
            {
                if ( file_exists( $dir . '/' . $file ) ) unlink( $dir . '/' . $file );
            }    
        }
    }//end func
     
}
